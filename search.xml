<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>THML小总结</title>
    <url>/2016/08/16/HTML/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- 目录开始 -->
<h2 id="一-目录"><a href="#一-目录" class="headerlink" title="一 目录"></a><a name="chapter-one" id="chapter-one"></a>一 目录</h2><p><strong>不折腾的前端，和咸鱼有什么区别</strong></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>目录</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#chapter-one">一 目录</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-two" id="catalog-chapter-two"></a><a href="#chapter-two">二 HTML5 标签</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-three" id="catalog-chapter-three"></a><a href="#chapter-three">三 结构语义化</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-three-one">3.1 为什么需要语义化</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-three-two">3.2 结构语义化</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-three-three">3.3 头部</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-three-four">3.4 主要内容</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-three-five">3.5 页脚</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-four" id="catalog-chapter-four"></a><a href="#chapter-four">四 层级关系</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-five" id="catalog-chapter-five"></a><a href="#chapter-five">五 替换元素和不可替换元素</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-five-one">5.1 替换元素</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-five-two">5.2 不可替换元素</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-six" id="catalog-chapter-six"></a><a href="#chapter-six">六 行内元素和块级元素</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-one">6.1 常见块级元素</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-two">6.2 常见行内元素</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-three">6.3 行内元素和块级元素转换</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-seven" id="catalog-chapter-seven"></a><a href="#chapter-seven">七 参考文献</a></td>
</tr>
</tbody></table>
<!-- 目录结束 -->

<h2 id="二-HTML5-标签"><a href="#二-HTML5-标签" class="headerlink" title="二 HTML5 标签"></a><a name="chapter-two" id="chapter-two"></a>二 HTML5 标签</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>常见的 HTML5 标签有：</p>
<ul>
<li><code>&lt;section&gt;</code> - 章节</li>
<li><code>&lt;nav&gt;</code> - 导航</li>
<li><code>&lt;article&gt;</code> - 完整独立内容块</li>
<li><code>&lt;aside&gt;</code> - 和页面内容关联度较低的内容：例如广告（剩余的）</li>
<li><code>&lt;header&gt;</code> - 页面或者文章头部</li>
<li><code>&lt;footer&gt;</code> - 页面或者文字尾部</li>
<li><code>&lt;main&gt;</code> - 文档主要内容</li>
<li><code>&lt;figure&gt;</code> - 一个和文档有关的图例</li>
<li><code>&lt;figcaption&gt;</code> - 图例说明</li>
<li><code>&lt;mark&gt;</code> - 需要被高亮的引用文字</li>
<li><code>&lt;video&gt;</code> - 视频</li>
<li><code>&lt;audio&gt;</code> - 音频</li>
<li><code>&lt;source&gt;</code> - 为 <code>video</code> 和 <code>audio</code> 指定 <strong>媒体源</strong></li>
<li><code>&lt;track&gt;</code> - 为 <code>video</code> 和 <code>audio</code> 指定 <strong>文本轨道</strong>（字幕）</li>
<li><code>&lt;canvas&gt;</code> - 位图区域</li>
<li><code>&lt;svg&gt;</code> - 矢量图</li>
<li><code>&lt;progress&gt;</code> - 进度条</li>
<li><code>&lt;meter&gt;</code> - 滑动条</li>
</ul>
<h2 id="三-结构语义化"><a href="#三-结构语义化" class="headerlink" title="三 结构语义化"></a><a name="chapter-three" id="chapter-three"></a>三 结构语义化</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>HTML 有个光荣的任务：</p>
<ul>
<li>在没有 CSS 的情况下，能够清晰的、有结构地表述这个页面的内容。</li>
</ul>
<p>所以，构建一个页面结构，需要充分考虑到语义化。</p>
<h3 id="3-1-为什么需要语义化"><a href="#3-1-为什么需要语义化" class="headerlink" title="3.1 为什么需要语义化"></a><a name="chapter-three-one" id="chapter-three-one"></a>3.1 为什么需要语义化</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li>易修改、易维护</li>
<li>无障碍阅读支持</li>
<li>搜索引擎良好，利于 SEO</li>
<li>面向未来的 HTML，浏览器在未来可能提供更丰富的支持</li>
</ul>
<h3 id="3-2-结构语义化"><a href="#3-2-结构语义化" class="headerlink" title="3.2 结构语义化"></a><a name="chapter-three-two" id="chapter-three-two"></a>3.2 结构语义化</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内容区 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 左侧 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 左侧标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片区块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span><span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 右侧 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 友情链接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 底部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-头部"><a href="#3-3-头部" class="headerlink" title="3.3 头部"></a><a name="chapter-three-three" id="chapter-three-three"></a>3.3 头部</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>&lt;header&gt;</code> 用来表示网页的头部。</p>
<p>头部信息区可以包含 <code>&lt;nav&gt;</code> 导航栏等内容信息。</p>
<h3 id="3-4-主要内容"><a href="#3-4-主要内容" class="headerlink" title="3.4 主要内容"></a><a name="chapter-three-four" id="chapter-three-four"></a>3.4 主要内容</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>&lt;main&gt;</code> 用来规定出 <code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code> 外的所有内容：</p>
<ul>
<li><code>&lt;aside&gt;</code>：可以存放广告、搜索内容、分享链接等</li>
<li><code>&lt;section&gt;</code>：表单、清单、文章分块等内容</li>
<li><code>&lt;article&gt;</code>：表示一个完整的、自成一体的内容块。如文章或者新闻报道。</li>
<li><code>&lt;figure&gt;</code>：文章插图块</li>
<li><code>&lt;figcaption&gt;</code>：文章插图注释</li>
</ul>
<h3 id="3-5-页脚"><a href="#3-5-页脚" class="headerlink" title="3.5 页脚"></a><a name="chapter-three-five" id="chapter-three-five"></a>3.5 页脚</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>&lt;footer&gt;</code> 标签内部可以包含版权、来源信息、法律限制等文本或者链接信息。</p>
<h2 id="四-层级关系"><a href="#四-层级关系" class="headerlink" title="四 层级关系"></a><a name="chapter-four" id="chapter-four"></a>四 层级关系</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>docoment</code>、<code>window</code>、<code>html</code>、<code>body</code> 的层级关系：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span> &gt; <span class="built_in">document</span> &gt; html &gt; body</span><br></pre></td></tr></table></figure>

<ul>
<li><code>window</code> 是 <code>BOM</code> 的核心对象，它一方面用来获取和设置浏览器的属性和行为，另一方面作为一个全局对象。</li>
<li><code>document</code> 对象是一个跟文档相关的对象，拥有一些操作文档内容的功能，但是地位没有 <code>window</code> 高。</li>
<li><code>html</code> 元素对象跟 <code>document</code> 元素对象是属于 <code>html</code> 文档的 <code>DOM</code> 对象，可以认为就是 <code>html</code> 源代码中那些标签化成的对象，它们跟 <code>div</code>、<code>select</code> 这些对象没有什么根本区别。</li>
</ul>
<h2 id="五-替换元素和不可替换元素"><a href="#五-替换元素和不可替换元素" class="headerlink" title="五 替换元素和不可替换元素"></a><a name="chapter-five" id="chapter-five"></a>五 替换元素和不可替换元素</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>&lt;input&gt;</code> 和 <code>&lt;img&gt;</code> 虽然是行内元素，但是它们是可以设置宽和高的，因为它们涉及到可替换元素和不可替换元素。</p>
<h3 id="5-1-替换元素"><a href="#5-1-替换元素" class="headerlink" title="5.1 替换元素"></a><a name="chapter-five-one" id="chapter-five-one"></a>5.1 替换元素</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><strong>替换元素</strong> 就是浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p>
<p>例如：</p>
<ul>
<li><code>&lt;img&gt;</code> 根据 <code>src</code> 属性来读取图片信息并显示出来</li>
<li><code>&lt;input&gt;</code> 根据标签的 <code>type</code> 属性来决定是显示输入框，还是单选按钮。</li>
</ul>
<p>替换元素有：<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;object&gt;</code>。</p>
<h3 id="5-2-不可替换元素"><a href="#5-2-不可替换元素" class="headerlink" title="5.2 不可替换元素"></a><a name="chapter-five-two" id="chapter-five-two"></a>5.2 不可替换元素</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>HTML 大多数元素都是不可替换的，即其内容直接展现给浏览器。</p>
<p>例如：</p>
<ul>
<li><code>&lt;p&gt;</code> 直接全部展示</li>
</ul>
<h2 id="六-行内元素和块级元素"><a href="#六-行内元素和块级元素" class="headerlink" title="六 行内元素和块级元素"></a><a name="chapter-six" id="chapter-six"></a>六 行内元素和块级元素</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>整体比较：</p>
<table>
<thead>
<tr>
<th>块级元素</th>
<th>行内元素</th>
</tr>
</thead>
<tbody><tr>
<td>独占一行。默认情况下宽度自动填充父元素宽度</td>
<td>宽度随元素内容变化。相邻的行内元素会排列在同一行内，直到一行排不下，才会换行。</td>
</tr>
<tr>
<td>可以设置 <code>width</code>、<code>height</code></td>
<td>设置 <code>width</code>、<code>height</code> 无效</td>
</tr>
<tr>
<td>可以设置 <code>margin</code> 和 <code>padding</code></td>
<td>可以设置 <code>margin-left</code>、<code>margin-right</code>、<code>padding-left</code>、<code>padding-right</code></td>
</tr>
<tr>
<td>对应：<code>display: block</code></td>
<td>对应 <code>display: inline</code></td>
</tr>
</tbody></table>
<h3 id="6-1-常见块级元素"><a href="#6-1-常见块级元素" class="headerlink" title="6.1 常见块级元素"></a><a name="chapter-six-one" id="chapter-six-one"></a>6.1 常见块级元素</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>&lt;div&gt;</code> - 标签块</li>
<li><code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code> - 标题 1 - 标题 6</li>
<li><code>&lt;form&gt;</code> - 表单</li>
<li><code>&lt;hr&gt;</code> - 水平线</li>
<li><code>&lt;ul&gt;</code> - 无序列表</li>
<li><code>&lt;ol&gt;</code> - 有序列表</li>
<li><code>&lt;li&gt;</code> - 定义列表项目，用于 <code>ul</code> 和 <code>li</code> 中</li>
<li><code>&lt;p&gt;</code> - 段落</li>
<li><code>&lt;table&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;td&gt;</code> - 表格元素</li>
</ul>
<h3 id="6-2-常见行内元素"><a href="#6-2-常见行内元素" class="headerlink" title="6.2 常见行内元素"></a><a name="chapter-six-two" id="chapter-six-two"></a>6.2 常见行内元素</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>&lt;a&gt;</code> - 超链接或者锚点</li>
<li><code>&lt;b&gt;</code> - 字体加粗</li>
<li><code>&lt;br&gt;</code> - 换行</li>
<li><code>&lt;code&gt;</code> - 定义计算机代码文本</li>
<li><code>&lt;i&gt;</code> - 斜体</li>
<li><code>&lt;img&gt;</code> - 图片</li>
<li><code>&lt;input&gt;</code> - 输入框</li>
<li><code>&lt;label&gt;</code> - 为 <code>input</code> 进行标记/标注</li>
<li><code>&lt;button&gt;</code> - 按钮</li>
<li><code>&lt;textarea&gt;</code> - 多行文本框</li>
</ul>
<h3 id="6-3-行内元素和块级元素转换"><a href="#6-3-行内元素和块级元素转换" class="headerlink" title="6.3 行内元素和块级元素转换"></a><a name="chapter-six-three" id="chapter-six-three"></a>6.3 行内元素和块级元素转换</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>display</code> 属性可以使行内元素和块级元素之间转换。</p>
<ul>
<li><code>display: inline</code> - 转换为行内元素</li>
<li><code>display: block</code> - 转换为块级元素</li>
<li><code>display: inline-block</code> - 转换为行内块元素</li>
</ul>
<h2 id="七-参考文献"><a href="#七-参考文献" class="headerlink" title="七 参考文献"></a><a name="chapter-seven" id="chapter-seven"></a>七 参考文献</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>本系列参考 8 篇文章。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list">MDN - HTML5 标签列表</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://rainylog.com/post/ife-note-1">html5语义化标签</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://blog.csdn.net/caoPengFlying/article/details/75334264">块级元素与内联元素总结</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://www.cnblogs.com/dxzg/p/6423922.html">html中内联元素和块级元素的区别</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list">MDN - HTML5 标签列表</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://rainylog.com/post/ife-note-1">html5语义化标签</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://blog.csdn.net/caoPengFlying/article/details/75334264">块级元素与内联元素总结</a>【阅读建议：5min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://www.cnblogs.com/dxzg/p/6423922.html">html中内联元素和块级元素的区别</a>【阅读建议：5min】</li>
</ul>
<hr>
<blockquote>
<p>jsliang 的文档库由 <a href="https://github.com/LiangJunrong">梁峻荣</a> 采用 <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a> 进行许可。<br/>基于 <a href="https://github.com/LiangJunrong/document-library">https://github.com/LiangJunrong/document-library</a> 上的作品创作。<br/>本许可协议授权之外的使用权限可以从 <a href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>盒子模型</title>
    <url>/2016/08/16/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一-目录"><a href="#一-目录" class="headerlink" title="一 目录"></a><a name="chapter-one" id="chapter-one"></a>一 目录</h2><p><strong>不折腾的前端，和咸鱼有什么区别</strong></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>目录</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#chapter-one">一 目录</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-two" id="catalog-chapter-two"></a><a href="#chapter-two">二 前言</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-three" id="catalog-chapter-three"></a><a href="#chapter-three">三 举例</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-four" id="catalog-chapter-four"></a><a href="#chapter-four">四 题目</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-four-one">4.1 题目 1：简单描述下盒子模型</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-four-two">4.2 题目 2：计算实际 margin 和 padding</a></td>
</tr>
</tbody></table>
<!-- 目录结束 -->

<h2 id="二-前言"><a href="#二-前言" class="headerlink" title="二 前言"></a><a name="chapter-two" id="chapter-two"></a>二 前言</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>CSS 盒子模型分为标准盒子和怪异盒子。</p>
<p>那么标准盒子和怪异盒子的 <code>width</code>、<code>padding</code>、<code>border</code> 以及 <code>margin</code> 是如何相处的呢？</p>
<p>如何设置一个块为标准盒子或者怪异盒子呢？</p>
<p>下面我们一一讲解。</p>
<h2 id="三-举例"><a href="#三-举例" class="headerlink" title="三 举例"></a><a name="chapter-three" id="chapter-three"></a>三 举例</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>已知有代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: deepskyblue;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* 怪异盒子：100 */</span></span></span><br><span class="line"><span class="css">      <span class="comment">/* box-sizing: border-box;  */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="comment">/* 标准盒子：140 */</span></span></span><br><span class="line"><span class="css">      <span class="attribute">box-sizing</span>: content-box;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此刻它在 W3C 标准（标准盒子）下展示为：</p>
<p><img src="/images/box-sizing-2.png" alt="图"></p>
<p>在 IE（怪异盒子）下展示为：</p>
<p><img src="/images/box-sizing-1.png" alt="图"></p>
<p>假设我们编写 JS 脚本如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> div = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果写在行内，可以获取 100px，当前打印为空</span></span><br><span class="line"><span class="comment">// （标准盒子和怪异盒子相同，注意带单位的）</span></span><br><span class="line"><span class="built_in">console</span>.log(div.style.width); <span class="comment">// 100px || &#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准盒子：140；怪异盒子：100;（不带单位的）</span></span><br><span class="line"><span class="built_in">console</span>.log(div.offsetWidth); <span class="comment">// 100 || 140</span></span><br></pre></td></tr></table></figure>

<p>关于 JavaScript 获取 HTML 元素的实际宽度高度：</p>
<ol>
<li><code>#div.style.width</code>：这种方法只有在样式写在行内的时候，才能获取到宽度，并且是带单位的：<code>100px</code>。如果不是行内样式，那么获取到的是空的。</li>
<li><code>#div.offsetWidth</code>：这种方法看盒子模式，如果是 IE 模式的怪异盒子，那么获取到 <code>100</code>（<code>border-box</code>）；如果是 W3C 的标准盒子（<code>content-box</code>），那么获取到 <code>140</code>。注意是不带单位的。</li>
</ol>
<h2 id="四-题目"><a href="#四-题目" class="headerlink" title="四 题目"></a><a name="chapter-four" id="chapter-four"></a>四 题目</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>小收集几道题。</p>
<h3 id="4-1-题目-1：简单描述下盒子模型"><a href="#4-1-题目-1：简单描述下盒子模型" class="headerlink" title="4.1 题目 1：简单描述下盒子模型"></a><a name="chapter-four-one" id="chapter-four-one"></a>4.1 题目 1：简单描述下盒子模型</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>请简单描述下盒子模型？</p>
<hr>
<blockquote>
<p>考查内容：盒子模型</p>
</blockquote>
<p>答：</p>
<ol>
<li>CSS 盒子模型分为标准盒子和怪异盒子。</li>
<li>标准盒子的 <code>contentWidth</code> 等于设置的 <code>width</code>，它的<code>实际总宽度 = width + padding + border + margin</code>。（高度也一样）</li>
<li>怪异盒子的 <code>contentWidth</code> 等于设置的 <code>width + padding + border</code>，它的<code>实际总宽度 = contentWidth + margin</code>。（高度也一样）</li>
<li>建议在页面初始化的时候，设置全局 CSS 属性 <code>box-sizing</code>，统一标准。<ul>
<li><code>inherit</code> - 继承父元素的值</li>
<li><code>content-box</code> - 指定盒子为 W3C（标准盒子）</li>
<li><code>border-box</code> - 指定为 IE（怪异盒子）。</li>
</ul>
</li>
</ol>
<h3 id="4-2-题目-2：计算实际-margin-和-padding"><a href="#4-2-题目-2：计算实际-margin-和-padding" class="headerlink" title="4.2 题目 2：计算实际 margin 和 padding"></a><a name="chapter-four-two" id="chapter-four-two"></a>4.2 题目 2：计算实际 margin 和 padding</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>怪异盒子（<code>border-box</code>）下宽度为 <code>100px</code>，高度为 <code>200px</code>，设置它的 <code>padding</code> 和 <code>margin</code> 为 <code>20%</code>，请问它的 <code>padding</code> 和 <code>margin</code> 实际为多少？</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">padding</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">margin</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>怪异盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>考查内容：盒子模型 + CSS 百分比</p>
</blockquote>
<p>答：</p>
<p>开放式题目，有坑，百分比设置是相对于上一个块元素来说的。</p>
<p>假设 <code>body</code> 下有一个 <code>div</code>，那么这个 <code>div</code> 设置百分占比就是找它上一个 <code>display: block/inline-block</code> 元素，即 <code>body</code> 的宽度（默认 <code>100%</code>）。</p>
<p>所以这时候需要得知 <code>body</code> 在浏览器中显示的实际宽度，才可以计算出 <code>div</code> 的 <code>padding</code> 和 <code>margin</code>。</p>
<p>所以这道题跟盒子模型无关的！</p>
<p>既然这样，我们改下题目，假设：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-class">.div</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="attribute">background</span>: deepskyblue;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 怪异盒子*/</span></span></span><br><span class="line"><span class="css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 标准盒子 */</span></span></span><br><span class="line"><span class="css">  <span class="comment">/* box-sizing: content-box; */</span></span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">padding</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="attribute">margin</span>: <span class="number">20%</span>;</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">   盒子模型</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请问怪异盒子和标准盒子下它的 <code>padding</code> 和 <code>margin</code> 是多少？</p>
<ul>
<li>怪异盒子</li>
</ul>
<ol>
<li>此时父元素（第一个盒子）没有宽度，会被它的子元素撑宽，所以父元素的宽度是 <code>100px</code>。（这个宽度就跟怪异盒子有关，<code>100px</code> 是 <code>.div</code> 盒子的宽度）</li>
<li>父元素的 <code>20%</code> = <code>100 * 20%</code> = <code>20px</code>。</li>
<li>所以此时它的 <code>padding</code> 和 <code>margin</code> 是 <code>20px</code>。</li>
</ol>
<ul>
<li>标准盒子</li>
</ul>
<ol>
<li>此时父元素被子元素撑宽，父元素的宽度是 <code>120px</code>（标准盒子下，<code>120px</code> 是 <code>.div</code> 盒子的 <code>width</code> + 两个 <code>border</code>）</li>
<li>父元素的 <code>20%</code> = <code>120 * 20%</code> = <code>24px</code>。</li>
<li>所以此时它的 <code>padding</code> 和 <code>margin</code> 是 <code>24px</code>。</li>
</ol>
<p>那么高度呢？请计算一下！</p>
<hr>
<blockquote>
<p>jsliang 的文档库由 <a href="https://github.com/LiangJunrong">梁峻荣</a> 采用 <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a> 进行许可。<br/>基于 <a href="https://github.com/LiangJunrong/document-library">https://github.com/LiangJunrong/document-library</a> 上的作品创作。<br/>本许可协议授权之外的使用权限可以从 <a href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS样式</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/07/12/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>移动端</title>
    <url>/2016/08/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- 目录开始 -->
<h2 id="一-目录"><a href="#一-目录" class="headerlink" title="一 目录"></a><a name="chapter-one" id="chapter-one"></a>一 目录</h2><p><strong>不折腾的前端，和咸鱼有什么区别</strong></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>目录</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#chapter-one">一 目录</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-two" id="catalog-chapter-two"></a><a href="#chapter-two">二 前言</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-three" id="catalog-chapter-three"></a><a href="#chapter-three">三 移动端使用的单位</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-four" id="catalog-chapter-four"></a><a href="#chapter-four">四 移动端布局总结</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-five" id="catalog-chapter-five"></a><a href="#chapter-five">五 1px 实现</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-six" id="catalog-chapter-six"></a><a href="#chapter-six">六 300ms 点击延迟</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-one">6.1 jsliang 阐述</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-two">6.2 浏览器开发商解决方案</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-six-three">6.3 JavaScript 解决方案</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-seven" id="catalog-chapter-seven"></a><a href="#chapter-seven">七 参考文献</a></td>
</tr>
</tbody></table>
<!-- 目录结束 -->

<h2 id="二-前言"><a href="#二-前言" class="headerlink" title="二 前言"></a><a name="chapter-two" id="chapter-two"></a>二 前言</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>关于移动端的一些问题。</p>
<h2 id="三-移动端使用的单位"><a href="#三-移动端使用的单位" class="headerlink" title="三 移动端使用的单位"></a><a name="chapter-three" id="chapter-three"></a>三 移动端使用的单位</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>em</code>：定义字体大小时以父级的字体大小为基准；定义长度单位时以当前字体大小为基准。</li>
<li><code>rem</code>：以根元素的字体大小为基准。</li>
<li><code>%</code>：以父级的宽度为基准。</li>
<li><code>vw/vh</code>：基于视口的宽度和高度。</li>
</ul>
<h2 id="四-移动端布局总结"><a href="#四-移动端布局总结" class="headerlink" title="四 移动端布局总结"></a><a name="chapter-four" id="chapter-four"></a>四 移动端布局总结</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ol>
<li>使用 <code>rem</code> 单位。可以拷贝淘宝那份代码直接使用，简单来说就是定义 <code>1rem = 16px</code>，然后配合 <code>meta</code> 使用。</li>
<li>通过 <code>position: relative/absolute</code> 布局（现在更推荐使用 Flex 布局）</li>
</ol>
<p>以上为个人经验，更多的没接触过，欢迎补充。</p>
<h2 id="五-1px-实现"><a href="#五-1px-实现" class="headerlink" title="五 1px 实现"></a><a name="chapter-five" id="chapter-five"></a>五 1px 实现</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>产生的原因：</p>
<p>根本原因是 <code>750px</code> 的设计稿上是 UI 设计师期待的 <code>1px</code> 物理像素，它对应实际 <code>375px</code> 稿子上的 <code>0.5px</code> 设备独立像素。</p>
<p>而 <code>0.5px</code> 设备独立像素对于 <code>IOS-8</code> 支持，对于安卓不支持。</p>
<p>所以安卓会将 <code>0.5px</code> 的设备独立像素渲染成 <code>1px</code> 的设备独立像素，也就是说，安卓在 <code>375px</code> 稿子上的设备独立像素为 <code>1px</code> 时，占 <code>2px</code> 物理像素，更粗。</p>
<p>所以我们拿到设计稿，要按照像素比 <code>dpr</code> 换算，每次量的单位 = <code>单位 / dpr</code>，比如 <code>dpr</code> 为 2 的时候，<code>1px</code> 转换为 CSS 以后就是 <code>0.5px</code>。（我们看的页面效果是按以物理像素来说，这才是问题的关键）</p>
<p>方法一：利用 <code>::after</code> + <code>transform</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二：利用 <code>box-shadow</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>: &#123;</span><br><span class="line">  box-shadow: <span class="number">0</span> <span class="number">0.5px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六-300ms-点击延迟"><a href="#六-300ms-点击延迟" class="headerlink" title="六 300ms 点击延迟"></a><a name="chapter-six" id="chapter-six"></a>六 300ms 点击延迟</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>历史原因：</p>
<p>首款 iPhone 发布的时候，因为手机不知道用户点击一次屏幕，是点击按钮链接，还是要进行双击缩放。</p>
<p>所以 IOS Safari 就等待 <code>300ms</code> 来判断用户需要哪个操作（单击还是双击），然后产品一把抄，其他手机也逐渐变成这样了。</p>
<h3 id="6-1-jsliang-阐述"><a href="#6-1-jsliang-阐述" class="headerlink" title="6.1 jsliang 阐述"></a><a name="chapter-six-one" id="chapter-six-one"></a>6.1 jsliang 阐述</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><code>300ms</code> 是由于首款苹果做了个双击放大的效果，为了能看到用户到底是希望单击还是双击，所以有个 <code>300ms</code> 的等待，让手机知道用户想做啥。</p>
<p>一开始还没啥，现在网速越来越快、手机性能越来越好，这个弊端就暴露了。</p>
<p>网上有很多解决方案，说的较多的是浏览器厂商提供 <code>viewport</code> 的设置，还有 <code>pollfill</code>。</p>
<p>但是比较有效的是 <code>FastClick</code>，它利用的原理是在 <code>touchend</code> 中绑定自定义 <code>click</code> 事件，触发该事件后直接阻止 <code>300ms</code> 后的 <code>click</code> 事件。</p>
<p>实现自定义事件有 3 种方法：</p>
<ol>
<li><code>new Event</code></li>
<li><code>new CustomEvent</code></li>
<li><code>document.createEvent(&#39;CustomEvent&#39;)</code></li>
</ol>
<p>然后通过给按钮绑定 <code>addEventListener(eventName, callback)</code> 来实现。</p>
<h3 id="6-2-浏览器开发商解决方案"><a href="#6-2-浏览器开发商解决方案" class="headerlink" title="6.2 浏览器开发商解决方案"></a><a name="chapter-six-two" id="chapter-six-two"></a>6.2 浏览器开发商解决方案</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li>方法一：禁止缩放</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;user-scalable=no, initial-scale=1, maxinmum-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>缺陷：并不能很好解决问题，用户想看图片这些没法双击放大看了。</p>
<ul>
<li>方法二：更改默认的视口宽度</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>总结</li>
</ul>
<p>对于方案一和方案二，<code>Chrome</code> 是率先支持的，<code>Firefox</code> 紧随其后，然而 <code>Safari</code> 令人头疼的是，它除了双击缩放还有双击滚动操作，如果采用这种两种方案，那势必连双击滚动也要一起禁用；</p>
<h3 id="6-3-JavaScript-解决方案"><a href="#6-3-JavaScript-解决方案" class="headerlink" title="6.3 JavaScript 解决方案"></a><a name="chapter-six-three" id="chapter-six-three"></a>6.3 JavaScript 解决方案</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li>方法一：指针事件的 <code>polyfill</code></li>
</ul>
<p>除了IE，其他大部分浏览器都还不支持指针事件。有一些JS库，可以让我们提前使用指针事件。比如：</p>
<ol>
<li>谷歌的Polymer</li>
<li>微软的HandJS</li>
<li>@Rich-Harris 的 Points</li>
</ol>
<ul>
<li>方法二：FastClick</li>
</ul>
<p>FastClick 是 FT Labs 专门为解决移动端浏览器 300 毫秒点击延迟问题所开发的一个轻量级的库。</p>
<p>实现原理是检测到 <code>touchend</code> 事件的时候，通过 DOM 自定义事件模拟一个 <code>click</code> 事件，并把浏览器 <code>300ms</code> 之后的 <code>click</code> 阻止掉。</p>
<h2 id="七-参考文献"><a href="#七-参考文献" class="headerlink" title="七 参考文献"></a><a name="chapter-seven" id="chapter-seven"></a>七 参考文献</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/AlloyTeam/Mars">Mars - mobile needs a hero</a>【阅读建议：无】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://github.com/hoosin/mobile-web-favorites">腾讯移动Web前端知识库</a>【阅读建议：无】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://juejin.im/post/6844903845617729549">关于移动端适配，你必须要知道的</a>【阅读建议：30min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://zhuanlan.zhihu.com/p/69522350">如何解决移动端Click事件300ms延迟的问题？</a>【阅读建议：20min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://www.cnblogs.com/chengxs/p/11064469.html">设计方案–移动端延迟300ms的原因以及解决方案</a>【阅读建议：20min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://cloud.tencent.com/developer/article/1352187">细说移动端 经典的REM布局 与 新秀VW布局</a>【阅读建议：30min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://juejin.im/post/5d19b729f265da1bb2774865">移动端1px解决方案</a>【阅读建议：30min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://jinlong.github.io/2015/05/24/css-retina-hairlines/">Retina屏的移动设备如何实现真正1px的线？</a>【阅读建议：20min】</li>
<li><input checked="" disabled="" type="checkbox"> <a href="https://juejin.im/post/6844903671143088136">rem布局解析</a>【阅读建议：5min】</li>
</ul>
<hr>
<blockquote>
<p>jsliang 的文档库由 <a href="https://github.com/LiangJunrong">梁峻荣</a> 采用 <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a> 进行许可。<br/>基于 <a href="https://github.com/LiangJunrong/document-library">https://github.com/LiangJunrong/document-library</a> 上的作品创作。<br/>本许可协议授权之外的使用权限可以从 <a href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS样式</category>
      </categories>
      <tags>
        <tag>移动端样式</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/2016/08/16/%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- 目录开始 -->
<h2 id="一-目录"><a href="#一-目录" class="headerlink" title="一 目录"></a><a name="chapter-one" id="chapter-one"></a>一 目录</h2><p><strong>不折腾的前端，和咸鱼有什么区别</strong></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th>目录</th>
</tr>
</thead>
<tbody><tr>
<td><a href="#chapter-one">一 目录</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-two" id="catalog-chapter-two"></a><a href="#chapter-two">二 前言</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-three" id="catalog-chapter-three"></a><a href="#chapter-three">三 DIV + CSS 布局的优缺点</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-four" id="catalog-chapter-four"></a><a href="#chapter-four">四 如何解决 a 标点击后 hover 事件失效的问题？</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-five" id="catalog-chapter-five"></a><a href="#chapter-five">五 响应式</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-six" id="catalog-chapter-six"></a><a href="#chapter-six">六 脱离文档流</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-seven" id="catalog-chapter-seven"></a><a href="#chapter-seven">七 块级格式化上下文（BFC）</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-eight" id="catalog-chapter-eight"></a><a href="#chapter-eight">八 盒子模型</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-night" id="catalog-chapter-night"></a><a href="#chapter-night">九 link 和 @import 区别</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-ten" id="catalog-chapter-ten"></a><a href="#chapter-ten">十 渐进增减和优雅降级</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-eleven" id="catalog-chapter-eleven"></a><a href="#chapter-eleven">十一 CSS 实现垂直居中</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-twelve" id="catalog-chapter-twelve"></a><a href="#chapter-twelve">十二 CSS 单位</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-thirteen" id="catalog-chapter-thirteen"></a><a href="#chapter-thirteen">十三 CSS 设置隐藏元素</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-fourteen" id="catalog-chapter-fourteen"></a><a href="#chapter-fourteen">十四 CSS 选择器</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-fifteen" id="catalog-chapter-fifteen"></a><a href="#chapter-fifteen">十五 层叠上下文</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-sixteen" id="catalog-chapter-sixteen"></a><a href="#chapter-sixteen">十六 dispaly 和 position</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-sixteen-one">16.1 display</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-sixteen-two">16.2 position</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-seventeen" id="catalog-chapter-seventeen"></a><a href="#chapter-seventeen">十七 CSS3</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-seventeen-one">17.1 新特性</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-seventeen-two">17.2 Flexbox 弹性盒布局模型</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-eighteen" id="catalog-chapter-eighteen"></a><a href="#chapter-eighteen">十八 CSS 优化</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-eighteen-one">18.1 CSS 匹配规则</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-eighteen-two">18.2 CSS 的 style 标签位置</a></td>
</tr>
<tr>
<td><a name="catalog-chapter-nighteen" id="catalog-chapter-nighteen"></a><a href="#chapter-nighteen">十九 题目</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-nighteen-one">19.1 BFC</a></td>
</tr>
<tr>
<td>&emsp;<a href="#chapter-nighteen-two">19.2 CSS 盒模型</a></td>
</tr>
</tbody></table>
<!-- 目录结束 -->

<h2 id="二-前言"><a href="#二-前言" class="headerlink" title="二 前言"></a><a name="chapter-two" id="chapter-two"></a>二 前言</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>CSS 基础有很多内容，需要细细理解，毕竟有时候用得不多，除非你是做移动端或者交互比较多的项目。</p>
<h2 id="三-DIV-CSS-布局的优缺点"><a href="#三-DIV-CSS-布局的优缺点" class="headerlink" title="三 DIV + CSS 布局的优缺点"></a><a name="chapter-three" id="chapter-three"></a>三 DIV + CSS 布局的优缺点</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>优点：</p>
<ol>
<li>代码精简，且结构与样式分离，易于维护</li>
<li>代码量减少了，减少了大量的带宽，页面加载的也更快，提升了用户的体验</li>
<li>对 SEO 搜索引擎更加友好，且 H5 又新增了许多语义化标签更是如此</li>
<li>允许更多炫酷的页面效果，丰富了页面</li>
<li>符合 W3C 标准，保证网站不会因为网络应用的升级而被淘汰</li>
</ol>
<p>缺点：</p>
<ol>
<li>不同浏览器对 Web 标准默认值不同，所以更容易出现对浏览器的兼容性问题。</li>
</ol>
<h2 id="四-如何解决-a-标点击后-hover-事件失效的问题？"><a href="#四-如何解决-a-标点击后-hover-事件失效的问题？" class="headerlink" title="四 如何解决 a 标点击后 hover 事件失效的问题？"></a><a name="chapter-four" id="chapter-four"></a>四 如何解决 a 标点击后 hover 事件失效的问题？</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>改变 <code>a</code> 标签 CSS 属性的排列顺序：</p>
<blockquote>
<p>LoVe HAte 原则</p>
</blockquote>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">link</span> -&gt;</span> <span class="function"><span class="title">visited</span> -&gt;</span> <span class="function"><span class="title">hover</span> -&gt;</span> active</span><br></pre></td></tr></table></figure>

<ul>
<li><code>a:link</code>：简写 <code>a</code>，未访问的样式</li>
<li><code>a:visited</code>：已经访问的样式</li>
<li><code>a:hover</code>：鼠标移上去时的样式</li>
<li><code>a:active</code>：鼠标按下的样式</li>
</ul>
<p>在 CSS 中，如果对于相同元素针对不同条件的定义，适宜将最一般的条件放在最上面，依次向下，保证最下面的是最特殊的条件（可以理解为样式覆盖）。</p>
<p>这样，浏览器显示元素的时候，才会从特殊到一半、逐级向上验证条件。</p>
<h2 id="五-响应式"><a href="#五-响应式" class="headerlink" title="五 响应式"></a><a name="chapter-five" id="chapter-five"></a>五 响应式</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>响应式网站设计（<code>Responsive Web design</code>）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。</p>
<p>基本原理是通过媒体查询（<code>@media</code>）检测不同的设备屏幕尺寸做处理。</p>
<p>好处：对某些数据的修改就能自动更新视图，让开发者不需要操作 DOM，有更多的时间去思考完成业务逻辑。</p>
<h2 id="六-脱离文档流"><a href="#六-脱离文档流" class="headerlink" title="六 脱离文档流"></a><a name="chapter-six" id="chapter-six"></a>六 脱离文档流</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><strong>文档流</strong>：将窗体自上而下分成一行一行，并在每行中按从左至右一次排放元素，成为文档流，也就普通流。</p>
<p><strong>脱离文档流</strong>：脱离文档流的元素，将不再在文档流占据空间，而是漂浮在文档流上方。</p>
<ul>
<li><code>float: left/right</code>：使用之后会脱离，但是其他盒子会环绕该元素的周围。</li>
<li><code>position: absolute/fixed</code>：<code>absolute</code> 为绝对定位，脱离文档流之后还是会相对于该元素的父类（做了 <code>relative/absolute</code> 定位的父类）进行偏移。而 <code>fixed</code> 就是完全脱离文档流，相对于 HTML （整个浏览器窗口）的形式展示。</li>
</ul>
<h2 id="七-块级格式化上下文（BFC）"><a href="#七-块级格式化上下文（BFC）" class="headerlink" title="七 块级格式化上下文（BFC）"></a><a name="chapter-seven" id="chapter-seven"></a>七 块级格式化上下文（BFC）</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p><strong>BFC 布局规则</strong> 是指页面上一个隔离的独立容器，容器内部的子元素不会影响到外面的元素，反之外面的元素也不会影响容器里面的元素。</p>
<p><strong>特性：</strong></p>
<ol>
<li>在 BFC 中，盒子从顶端开始垂直地一个接一个地排列</li>
<li>盒子垂直方向的距离由 <code>margin</code> 决定，属于同一个 BFC 的两个相邻盒子的 <code>margin</code> 会发生重叠</li>
</ol>
<p><strong>外边距问题</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; margin-bottom:100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; margin-top:200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这段代码产生的页面中，它们的边距是 <code>200px</code>，需要通过 BFC 解决边距问题。</p>
<p><strong>主要用途：</strong></p>
<ol>
<li>清除元素内部浮动。<code>overflow: hidden</code></li>
<li>解决外边距合并问题。创建 2 个不同 BFC，就不会发生 <code>margin</code> 重叠</li>
</ol>
<p><strong>产生 BFC 的条件：</strong></p>
<ul>
<li>根元素 <code>html</code></li>
<li><code>float: left/right</code></li>
<li><code>position: absolute/fixed</code></li>
<li><code>display: inline-block/flex/grid</code></li>
<li><code>overflow: hidden</code></li>
</ul>
<h2 id="八-盒子模型"><a href="#八-盒子模型" class="headerlink" title="八 盒子模型"></a><a name="chapter-eight" id="chapter-eight"></a>八 盒子模型</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>box-sizing: content-box</code>。标准盒子，总宽度等于：<code>width + padding + border + margin</code>。</li>
<li><code>box-sizing: border-box</code>。IE 盒子，总宽度等于：<code>width + margin</code>。IE 盒子的 <code>width</code> 包含了 <code>width</code>、<code>padding</code> 和 <code>border</code> 属性。</li>
</ul>
<p>详细看：<a href="https://github.com/LiangJunrong/document-library/blob/master/%E7%B3%BB%E5%88%97-%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/CSS/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.md">jsliang - 盒子模型</a></p>
<h2 id="九-link-和-import-区别"><a href="#九-link-和-import-区别" class="headerlink" title="九 link 和 @import 区别"></a><a name="chapter-night" id="chapter-night"></a>九 link 和 @import 区别</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>CSS 引入方式有：</p>
<ul>
<li>内联：<code>style</code> 属性（<code>style=&quot;color: red&quot;</code>）</li>
<li>内嵌：<code>style</code> 标签（<code>&lt;style&gt;&lt;/style&gt;</code>）</li>
<li>外链：<code>link</code> 标签（<code>&lt;link href=&quot;index.css&quot;&gt;</code></li>
<li>导入：<code>@import</code>（<code>@import url(&#39;index.css&#39;)</code> 或者 <code>@import &#39;index.css&#39;</code>）</li>
</ul>
<p><code>link</code> 和 <code>@import</code> 区别：</p>
<ul>
<li><code>link</code> 是 <code>XHTML</code> 标签，除了加载 <code>CSS</code> 外，还可以定义 <code>RSS</code> 等其他事务；<code>@import</code> 属于 <code>CSS</code> 范畴，只能加载 <code>CSS</code>。</li>
<li><code>link</code> 引用 <code>CSS</code> 时，在页面载入时同时加载；<code>@import</code> 需要页面网页完全载入以后加载。</li>
<li><code>link</code> 是 <code>XHTML</code> 标签，无兼容问题；<code>@import</code> 是在 <code>CSS2.1</code> 提出的，低版本的浏览器不支持。</li>
<li><code>link</code> 支持使用 <code>Javascript</code> 控制 <code>DOM</code> 去改变样式；而 <code>@import</code> 不支持。</li>
</ul>
<h2 id="十-渐进增减和优雅降级"><a href="#十-渐进增减和优雅降级" class="headerlink" title="十 渐进增减和优雅降级"></a><a name="chapter-ten" id="chapter-ten"></a>十 渐进增减和优雅降级</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>关键的区别是他们所侧重的内容，以及这种不同造成的工作流程的差异。</p>
<ul>
<li><strong>优雅降级</strong>：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</li>
<li><strong>渐进增强</strong>：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li>
</ul>
<p>区别：</p>
<ul>
<li>优雅降级是从复杂的现状开始，并试图减少用户体验的供给</li>
<li>渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要</li>
<li>降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带</li>
</ul>
<h2 id="十一-CSS-实现垂直居中"><a href="#十一-CSS-实现垂直居中" class="headerlink" title="十一 CSS 实现垂直居中"></a><a name="chapter-eleven" id="chapter-eleven"></a>十一 CSS 实现垂直居中</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><strong>方法一：Flex 布局（子元素是块级元素）</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-center</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法二：Flex 布局</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-center</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法三：绝对定位实现（定位元素定宽定高）</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-center</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法四：使用 transform</strong></li>
</ul>
<p>父盒子设置：<code>display: relative</code></p>
<p>div 设置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="十二-CSS-单位"><a href="#十二-CSS-单位" class="headerlink" title="十二 CSS 单位"></a><a name="chapter-twelve" id="chapter-twelve"></a>十二 CSS 单位</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><strong>px</strong></li>
</ul>
<p><code>px</code> 是像素（<code>pixel</code>）的缩写，相对长度单位，是网页设计常用的基本基本单位，它是相对于显示器屏幕分辨率而言的。</p>
<ul>
<li><strong>em</strong></li>
</ul>
<p><code>em</code> 是相对长度单位，相对于对象内文本的字体尺寸（参考物是父元素的 <code>font-size</code>。</p>
<p>如果当前父元素的字体元素未设置，则相对于浏览器的默认字体尺寸设置。</p>
<ul>
<li><strong>rem</strong></li>
</ul>
<p><code>rem</code> 是相对于 HTML 根元素的字体大小（<code>font-size</code>）来计算的长度单位。</p>
<p>如果你没有设置 HTML 字体大小，那么以浏览器默认为主，一般为 <code>16px</code>。</p>
<ul>
<li><strong>vw/vh</strong></li>
</ul>
<p><code>vw</code> 和 <code>vh</code> 是相对于 <code>viewport</code> - 相对视口的宽度或者高度而定的。</p>
<p>一般来说：<code>1vw = npx / 100</code>，即浏览器宽度为 <code>200px</code> 的时候，<code>1vw = 200px / 100</code>，即 <code>1vw = 2px</code>。</p>
<h2 id="十三-CSS-设置隐藏元素"><a href="#十三-CSS-设置隐藏元素" class="headerlink" title="十三 CSS 设置隐藏元素"></a><a name="chapter-thirteen" id="chapter-thirteen"></a>十三 CSS 设置隐藏元素</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>display: none</code>：彻底消失，会导致浏览器回流和重绘，不能再触发点击事件。</li>
<li><code>visibility: hidden</code>：元素隐藏，空间仍保留，会导致重绘，但是不能再触发点击事件。</li>
<li><code>opacity: 0</code>：设置为透明，相当于它还在那里，但是你看不到，可以触发点击事件。</li>
</ul>
<h2 id="十四-CSS-选择器"><a href="#十四-CSS-选择器" class="headerlink" title="十四 CSS 选择器"></a><a name="chapter-fourteen" id="chapter-fourteen"></a>十四 CSS 选择器</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>CSS 选择器及样式优先级：</p>
<ul>
<li>在属性后面使用 <code>!important</code> 会覆盖页面任意位置定义的元素样式</li>
<li>作为 <code>style</code> 属性写在元素内的样式（行内样式）</li>
<li><code>id</code> 选择器</li>
<li>类选择器 | 伪类选择器 | 属性选择器（后面样式覆盖前面样式）</li>
<li>标签选择器</li>
<li>通配符选择器</li>
<li>浏览器自定义样式</li>
</ul>
<h2 id="十五-层叠上下文"><a href="#十五-层叠上下文" class="headerlink" title="十五 层叠上下文"></a><a name="chapter-fifteen" id="chapter-fifteen"></a>十五 层叠上下文</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>层叠上下文（<code>stacking context</code>），是 HTML 中一个三维的概念。在 CSS2.1 规范中，每个盒模型的位置是三维的，分别是平面画布上的 X 轴，Y 轴以及表示层叠的 Z 轴。</p>
<p>一般情况下，元素在页面上沿 X 轴 Y 轴平铺，我们察觉不到它们在 Z 轴上的层叠关系。</p>
<p>而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。</p>
<p><strong>触发条件</strong>：</p>
<ul>
<li>根层叠上下文（<code>HTML</code>）</li>
<li><code>position</code></li>
<li>CSS3 属性<ul>
<li><code>flex</code></li>
<li><code>transform</code></li>
<li><code>opacity</code></li>
<li><code>filter</code></li>
<li><code>will-change</code></li>
<li><code>-webkit-overflow-scrolling</code></li>
</ul>
</li>
</ul>
<p><strong>层叠等级</strong>：层叠上下文在 Z 轴上的排序</p>
<ul>
<li>在同一层叠上下文中，层叠等级才有意义</li>
<li><code>z-index</code> 的优先级最高</li>
</ul>
<p><img src="https://user-gold-cdn.xitu.io/2019/2/14/168e9d9f3a1d368b?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="图"></p>
<h2 id="十六-dispaly-和-position"><a href="#十六-dispaly-和-position" class="headerlink" title="十六 dispaly 和 position"></a><a name="chapter-sixteen" id="chapter-sixteen"></a>十六 dispaly 和 position</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<h3 id="16-1-display"><a href="#16-1-display" class="headerlink" title="16.1 display"></a><a name="chapter-sixteen-one" id="chapter-sixteen-one"></a>16.1 display</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>inline</code>：（默认）内联</li>
<li><code>none</code>：隐藏</li>
<li><code>block</code>：块显示</li>
<li><code>table</code>：表格显示</li>
<li><code>inline-block</code>：内联块</li>
</ul>
<h3 id="16-2-position"><a href="#16-2-position" class="headerlink" title="16.2 position"></a><a name="chapter-sixteen-two" id="chapter-sixteen-two"></a>16.2 position</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>static</code>：默认位置。不需要特别声明，不常用。</li>
<li><code>relative</code>：相对定位。相对于元素默认的位置进行定位，设置 <code>top/left/right/bottom</code> 后的元素仍占据空间。</li>
<li><code>absolute</code>：绝对定位。如果父元素设置了 <code>position: absolute/relative</code>，那么这个设置成立。它会根据上一个设置了 <code>absolute/relative</code> 的元素进行偏移。</li>
<li><code>fixed</code>：固定定位。相对于整个浏览器窗口进行定位，无论页面怎么滚动。</li>
<li><code>sticky</code>：黏性定位。屏幕范围内该元素位置不受影响，超出范围后，会变成 <code>fixed</code>，根据设置的 <code>left/top</code> 等属性成固定的效果。</li>
</ul>
<h2 id="十七-CSS3"><a href="#十七-CSS3" class="headerlink" title="十七 CSS3"></a><a name="chapter-seventeen" id="chapter-seventeen"></a>十七 CSS3</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<h3 id="17-1-新特性"><a href="#17-1-新特性" class="headerlink" title="17.1 新特性"></a><a name="chapter-seventeen-one" id="chapter-seventeen-one"></a>17.1 新特性</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li><code>RGBA</code> 和透明度</li>
<li><code>background-image</code>、<code>background-origin(content-box/padding-box/border-box)</code>、<code>background-size</code>、<code>background-repeat</code></li>
<li><code>word-wrap</code>：对长的不可分割单词换行，例如 <code>word-wrap：break-word</code></li>
<li>文字阴影：<code>text-shadow: 5px 5px 5px #FF0000;</code>，对应水平阴影，垂直阴影，模糊距离，阴影颜色</li>
<li><code>font-face</code> 属性：定义自己的字体</li>
<li>圆角（边框半径）：<code>border-radius</code> 属性用于创建圆角</li>
<li>边框图片：<code>border-image: url(border.png) 30 30 round</code></li>
<li>盒阴影：<code>box-shadow: 10px 10px 5px #888888</code></li>
<li>媒体查询：定义两套 CSS，当浏览器的尺寸变化时会采用不同的属性</li>
</ul>
<h3 id="17-2-Flexbox-弹性盒布局模型"><a href="#17-2-Flexbox-弹性盒布局模型" class="headerlink" title="17.2 Flexbox 弹性盒布局模型"></a><a name="chapter-seventeen-two" id="chapter-seventeen-two"></a>17.2 Flexbox 弹性盒布局模型</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。</p>
<p>在传统的布局方式中，<code>block</code> 布局是把块在垂直方向从上到下依次排列的；而 <code>inline</code> 布局则是在水平方向来排列。</p>
<p>弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。</p>
<p>试用场景：弹性布局适合于移动前端开发，在 Android 和 IOS 上也完美支持。</p>
<h2 id="十八-CSS-优化"><a href="#十八-CSS-优化" class="headerlink" title="十八 CSS 优化"></a><a name="chapter-eighteen" id="chapter-eighteen"></a>十八 CSS 优化</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<ul>
<li>避免过度约束</li>
<li>避免后代选择符</li>
<li>避免链式选择符</li>
<li>使用紧凑的语法</li>
<li>避免不必要的命名空间</li>
<li>避免不必要的重复</li>
<li>最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么</li>
<li>避免 <code>!important</code>，可以选择其他选择器</li>
<li>尽可能的精简规则，你可以合并不同类里的重复规则</li>
</ul>
<h3 id="18-1-CSS-匹配规则"><a href="#18-1-CSS-匹配规则" class="headerlink" title="18.1 CSS 匹配规则"></a><a name="chapter-eighteen-one" id="chapter-eighteen-one"></a>18.1 CSS 匹配规则</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>CSS 选择器的解析是从右向左解析的。</p>
<p>若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。</p>
<p>若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。</p>
<p>两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。</p>
<h3 id="18-2-CSS-的-style-标签位置"><a href="#18-2-CSS-的-style-标签位置" class="headerlink" title="18.2 CSS 的 style 标签位置"></a><a name="chapter-eighteen-two" id="chapter-eighteen-two"></a>18.2 CSS 的 style 标签位置</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>页面加载自上而下，当然是先加载样式。</p>
<p>写在 <code>body</code> 标签后由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 <code>style</code> 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在 Windows 的 IE 下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）。</p>
<h2 id="十九-题目"><a href="#十九-题目" class="headerlink" title="十九 题目"></a><a name="chapter-nighteen" id="chapter-nighteen"></a>十九 题目</h2><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<h3 id="19-1-BFC"><a href="#19-1-BFC" class="headerlink" title="19.1 BFC"></a><a name="chapter-nighteen-one" id="chapter-nighteen-one"></a>19.1 BFC</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>如果父元素都为浮动，不能解决父类高度塌陷问题的是：</p>
<ul>
<li>A：给父元素添加 <code>clear: both</code></li>
<li>B：给父元素添加 <code>overflow: hidden</code></li>
<li>C：在浮动元素下方添加空 <code>div</code>，并添加样式 <code>clear: both</code></li>
<li>D：设置父元素 <code>:after &#123; content: &quot;&quot;, clear: both; display: block; overflow: hidden &#125;</code></li>
</ul>
<hr>
<p>答案：B</p>
<h3 id="19-2-CSS-盒模型"><a href="#19-2-CSS-盒模型" class="headerlink" title="19.2 CSS 盒模型"></a><a name="chapter-nighteen-two" id="chapter-nighteen-two"></a>19.2 CSS 盒模型</h3><blockquote>
<p><a href="#chapter-one">返回目录</a></p>
</blockquote>
<p>根据以下代码，两个 div 元素垂直间距为()</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; margin-bottom:100px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:100px; height:100px; margin-top:200px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>A：100px</li>
<li>B：200px</li>
<li>C：300px</li>
<li>D：400px</li>
</ul>
<hr>
<p>答案：B</p>
<p>原因：CSS 盒模型，块之间共享垂直外边距 <code>margin</code>，<code>margin</code> 取其最大值。（<code>margin</code> 塌陷问题）</p>
<hr>
<blockquote>
<p>jsliang 的文档库由 <a href="https://github.com/LiangJunrong">梁峻荣</a> 采用 <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/">知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议</a> 进行许可。<br/>基于 <a href="https://github.com/LiangJunrong/document-library">https://github.com/LiangJunrong/document-library</a> 上的作品创作。<br/>本许可协议授权之外的使用权限可以从 <a href="https://creativecommons.org/licenses/by-nc-sa/2.5/cn/">https://creativecommons.org/licenses/by-nc-sa/2.5/cn/</a> 处获得。</p>
</blockquote>
]]></content>
      <categories>
        <category>CSS样式</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
