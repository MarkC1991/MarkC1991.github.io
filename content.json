{"meta":{"title":"Pinocchioの博客","subtitle":"从现在开始记录","description":"记录？学习？","author":"Pinocchio","url":"http://markc1991.github.io","root":"/"},"pages":[{"title":"关于","date":"2021-07-15T02:11:39.000Z","updated":"2021-07-15T02:16:34.453Z","comments":true,"path":"about/index.html","permalink":"http://markc1991.github.io/about/index.html","excerpt":"","text":""},{"title":"归档","date":"2021-07-15T02:12:41.000Z","updated":"2021-07-15T02:16:47.180Z","comments":true,"path":"archives/index.html","permalink":"http://markc1991.github.io/archives/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-07-15T02:11:52.000Z","updated":"2021-07-15T02:17:18.466Z","comments":true,"path":"tags/index.html","permalink":"http://markc1991.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-07-15T02:12:24.000Z","updated":"2021-07-15T02:17:03.439Z","comments":true,"path":"categories/index.html","permalink":"http://markc1991.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2021-07-11T16:55:10.252Z","updated":"2021-07-15T07:27:45.572Z","comments":true,"path":"2021/07/12/hello-world/","link":"","permalink":"http://markc1991.github.io/2021/07/12/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"THML小总结","slug":"HTML","date":"2016-08-16T02:12:08.000Z","updated":"2021-07-15T12:10:09.020Z","comments":true,"path":"2016/08/16/HTML/","link":"","permalink":"http://markc1991.github.io/2016/08/16/HTML/","excerpt":"一 目录不折腾的前端，和咸鱼有什么区别","text":"一 目录不折腾的前端，和咸鱼有什么区别 目录 一 目录 二 HTML5 标签 三 结构语义化 &emsp;3.1 为什么需要语义化 &emsp;3.2 结构语义化 &emsp;3.3 头部 &emsp;3.4 主要内容 &emsp;3.5 页脚 四 层级关系 五 替换元素和不可替换元素 &emsp;5.1 替换元素 &emsp;5.2 不可替换元素 六 行内元素和块级元素 &emsp;6.1 常见块级元素 &emsp;6.2 常见行内元素 &emsp;6.3 行内元素和块级元素转换 七 参考文献 二 HTML5 标签 返回目录 常见的 HTML5 标签有： &lt;section&gt; - 章节 &lt;nav&gt; - 导航 &lt;article&gt; - 完整独立内容块 &lt;aside&gt; - 和页面内容关联度较低的内容：例如广告（剩余的） &lt;header&gt; - 页面或者文章头部 &lt;footer&gt; - 页面或者文字尾部 &lt;main&gt; - 文档主要内容 &lt;figure&gt; - 一个和文档有关的图例 &lt;figcaption&gt; - 图例说明 &lt;mark&gt; - 需要被高亮的引用文字 &lt;video&gt; - 视频 &lt;audio&gt; - 音频 &lt;source&gt; - 为 video 和 audio 指定 媒体源 &lt;track&gt; - 为 video 和 audio 指定 文本轨道（字幕） &lt;canvas&gt; - 位图区域 &lt;svg&gt; - 矢量图 &lt;progress&gt; - 进度条 &lt;meter&gt; - 滑动条 三 结构语义化 返回目录 HTML 有个光荣的任务： 在没有 CSS 的情况下，能够清晰的、有结构地表述这个页面的内容。 所以，构建一个页面结构，需要充分考虑到语义化。 3.1 为什么需要语义化 返回目录 易修改、易维护 无障碍阅读支持 搜索引擎良好，利于 SEO 面向未来的 HTML，浏览器在未来可能提供更丰富的支持 3.2 结构语义化 返回目录 12345678910111213141516171819202122232425262728&lt;!-- 头部 --&gt;&lt;header&gt; &lt;nav&gt;&lt;/nav&gt;&lt;/header&gt;&lt;!-- 内容区 --&gt;&lt;main&gt; &lt;!-- 左侧 --&gt; &lt;article&gt; &lt;!-- 左侧标题 --&gt; &lt;header&gt;&lt;/header&gt; &lt;!-- 图片区块 --&gt; &lt;figure&gt; &lt;img&gt; &lt;figcaption&gt;&lt;/figcaption&gt; &lt;/figure&gt; &lt;/article&gt; &lt;!-- 右侧 --&gt; &lt;aside&gt; &lt;!-- 友情链接 --&gt; &lt;nav&gt;&lt;/nav&gt; &lt;section&gt;&lt;/section&gt; &lt;/aside&gt;&lt;/main&gt;&lt;!-- 底部 --&gt;&lt;footer&gt;&lt;/footer&gt; 3.3 头部 返回目录 &lt;header&gt; 用来表示网页的头部。 头部信息区可以包含 &lt;nav&gt; 导航栏等内容信息。 3.4 主要内容 返回目录 &lt;main&gt; 用来规定出 &lt;header&gt;、&lt;footer&gt; 外的所有内容： &lt;aside&gt;：可以存放广告、搜索内容、分享链接等 &lt;section&gt;：表单、清单、文章分块等内容 &lt;article&gt;：表示一个完整的、自成一体的内容块。如文章或者新闻报道。 &lt;figure&gt;：文章插图块 &lt;figcaption&gt;：文章插图注释 3.5 页脚 返回目录 &lt;footer&gt; 标签内部可以包含版权、来源信息、法律限制等文本或者链接信息。 四 层级关系 返回目录 docoment、window、html、body 的层级关系： 1window &gt; document &gt; html &gt; body window 是 BOM 的核心对象，它一方面用来获取和设置浏览器的属性和行为，另一方面作为一个全局对象。 document 对象是一个跟文档相关的对象，拥有一些操作文档内容的功能，但是地位没有 window 高。 html 元素对象跟 document 元素对象是属于 html 文档的 DOM 对象，可以认为就是 html 源代码中那些标签化成的对象，它们跟 div、select 这些对象没有什么根本区别。 五 替换元素和不可替换元素 返回目录 &lt;input&gt; 和 &lt;img&gt; 虽然是行内元素，但是它们是可以设置宽和高的，因为它们涉及到可替换元素和不可替换元素。 5.1 替换元素 返回目录 替换元素 就是浏览器根据元素的标签和属性，来决定元素的具体显示内容。 例如： &lt;img&gt; 根据 src 属性来读取图片信息并显示出来 &lt;input&gt; 根据标签的 type 属性来决定是显示输入框，还是单选按钮。 替换元素有：&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;。 5.2 不可替换元素 返回目录 HTML 大多数元素都是不可替换的，即其内容直接展现给浏览器。 例如： &lt;p&gt; 直接全部展示 六 行内元素和块级元素 返回目录 整体比较： 块级元素 行内元素 独占一行。默认情况下宽度自动填充父元素宽度 宽度随元素内容变化。相邻的行内元素会排列在同一行内，直到一行排不下，才会换行。 可以设置 width、height 设置 width、height 无效 可以设置 margin 和 padding 可以设置 margin-left、margin-right、padding-left、padding-right 对应：display: block 对应 display: inline 6.1 常见块级元素 返回目录 &lt;div&gt; - 标签块 &lt;h1&gt;、&lt;h2&gt;、&lt;h3&gt;、&lt;h4&gt;、&lt;h5&gt;、&lt;h6&gt; - 标题 1 - 标题 6 &lt;form&gt; - 表单 &lt;hr&gt; - 水平线 &lt;ul&gt; - 无序列表 &lt;ol&gt; - 有序列表 &lt;li&gt; - 定义列表项目，用于 ul 和 li 中 &lt;p&gt; - 段落 &lt;table&gt;、&lt;thead&gt;、&lt;tbody&gt;、&lt;thead&gt;、&lt;th&gt;、&lt;tr&gt;、&lt;td&gt; - 表格元素 6.2 常见行内元素 返回目录 &lt;a&gt; - 超链接或者锚点 &lt;b&gt; - 字体加粗 &lt;br&gt; - 换行 &lt;code&gt; - 定义计算机代码文本 &lt;i&gt; - 斜体 &lt;img&gt; - 图片 &lt;input&gt; - 输入框 &lt;label&gt; - 为 input 进行标记/标注 &lt;button&gt; - 按钮 &lt;textarea&gt; - 多行文本框 6.3 行内元素和块级元素转换 返回目录 display 属性可以使行内元素和块级元素之间转换。 display: inline - 转换为行内元素 display: block - 转换为块级元素 display: inline-block - 转换为行内块元素 七 参考文献 返回目录 本系列参考 8 篇文章。 MDN - HTML5 标签列表【阅读建议：5min】 html5语义化标签【阅读建议：5min】 块级元素与内联元素总结【阅读建议：5min】 html中内联元素和块级元素的区别【阅读建议：5min】 MDN - HTML5 标签列表【阅读建议：5min】 html5语义化标签【阅读建议：5min】 块级元素与内联元素总结【阅读建议：5min】 html中内联元素和块级元素的区别【阅读建议：5min】 jsliang 的文档库由 梁峻荣 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议 进行许可。基于 https://github.com/LiangJunrong/document-library 上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。","categories":[{"name":"HTML","slug":"HTML","permalink":"http://markc1991.github.io/categories/HTML/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://markc1991.github.io/tags/HTML/"}]},{"title":"盒子模型","slug":"盒子模型","date":"2016-08-16T02:12:08.000Z","updated":"2021-07-15T07:20:28.137Z","comments":true,"path":"2016/08/16/盒子模型/","link":"","permalink":"http://markc1991.github.io/2016/08/16/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/","excerpt":"一 目录不折腾的前端，和咸鱼有什么区别","text":"一 目录不折腾的前端，和咸鱼有什么区别 目录 一 目录 二 前言 三 举例 四 题目 &emsp;4.1 题目 1：简单描述下盒子模型 &emsp;4.2 题目 2：计算实际 margin 和 padding 二 前言 返回目录 CSS 盒子模型分为标准盒子和怪异盒子。 那么标准盒子和怪异盒子的 width、padding、border 以及 margin 是如何相处的呢？ 如何设置一个块为标准盒子或者怪异盒子呢？ 下面我们一一讲解。 三 举例 返回目录 已知有代码： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;title&gt;盒子模型&lt;/title&gt; &lt;style&gt; div &#123; background: deepskyblue; /* 怪异盒子：100 */ /* box-sizing: border-box; */ /* 标准盒子：140 */ box-sizing: content-box; width: 100px; padding: 10px; border: 10px solid #ccc; margin: 10px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt;盒子模型&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 此刻它在 W3C 标准（标准盒子）下展示为： 在 IE（怪异盒子）下展示为： 假设我们编写 JS 脚本如下： 12345678const div = document.querySelector(&#x27;div&#x27;);// 如果写在行内，可以获取 100px，当前打印为空// （标准盒子和怪异盒子相同，注意带单位的）console.log(div.style.width); // 100px || &#x27;&#x27;// 标准盒子：140；怪异盒子：100;（不带单位的）console.log(div.offsetWidth); // 100 || 140 关于 JavaScript 获取 HTML 元素的实际宽度高度： #div.style.width：这种方法只有在样式写在行内的时候，才能获取到宽度，并且是带单位的：100px。如果不是行内样式，那么获取到的是空的。 #div.offsetWidth：这种方法看盒子模式，如果是 IE 模式的怪异盒子，那么获取到 100（border-box）；如果是 W3C 的标准盒子（content-box），那么获取到 140。注意是不带单位的。 四 题目 返回目录 小收集几道题。 4.1 题目 1：简单描述下盒子模型 返回目录 请简单描述下盒子模型？ 考查内容：盒子模型 答： CSS 盒子模型分为标准盒子和怪异盒子。 标准盒子的 contentWidth 等于设置的 width，它的实际总宽度 = width + padding + border + margin。（高度也一样） 怪异盒子的 contentWidth 等于设置的 width + padding + border，它的实际总宽度 = contentWidth + margin。（高度也一样） 建议在页面初始化的时候，设置全局 CSS 属性 box-sizing，统一标准。 inherit - 继承父元素的值 content-box - 指定盒子为 W3C（标准盒子） border-box - 指定为 IE（怪异盒子）。 4.2 题目 2：计算实际 margin 和 padding 返回目录 怪异盒子（border-box）下宽度为 100px，高度为 200px，设置它的 padding 和 margin 为 20%，请问它的 padding 和 margin 实际为多少？ 123456789101112131415&lt;style&gt; div &#123; box-sizing: border-box; width: 100px; height: 200px; padding: 20%; border: 10px solid #ccc; margin: 20%; &#125;&lt;/style&gt;&lt;body&gt; &lt;div&gt;怪异盒子&lt;/div&gt;&lt;/body&gt; 考查内容：盒子模型 + CSS 百分比 答： 开放式题目，有坑，百分比设置是相对于上一个块元素来说的。 假设 body 下有一个 div，那么这个 div 设置百分占比就是找它上一个 display: block/inline-block 元素，即 body 的宽度（默认 100%）。 所以这时候需要得知 body 在浏览器中显示的实际宽度，才可以计算出 div 的 padding 和 margin。 所以这道题跟盒子模型无关的！ 既然这样，我们改下题目，假设： 1234567891011121314151617181920212223&lt;style&gt;.div &#123; background: deepskyblue; /* 怪异盒子*/ box-sizing: border-box; /* 标准盒子 */ /* box-sizing: content-box; */ width: 100px; height: 200px; padding: 20%; border: 10px solid #ccc; margin: 20%;&#125;&lt;/style&gt;&lt;div style=&quot;display: inline-block&quot;&gt; &lt;div class=&quot;div&quot;&gt; 盒子模型 &lt;/div&gt;&lt;/div&gt; 请问怪异盒子和标准盒子下它的 padding 和 margin 是多少？ 怪异盒子 此时父元素（第一个盒子）没有宽度，会被它的子元素撑宽，所以父元素的宽度是 100px。（这个宽度就跟怪异盒子有关，100px 是 .div 盒子的宽度） 父元素的 20% = 100 * 20% = 20px。 所以此时它的 padding 和 margin 是 20px。 标准盒子 此时父元素被子元素撑宽，父元素的宽度是 120px（标准盒子下，120px 是 .div 盒子的 width + 两个 border） 父元素的 20% = 120 * 20% = 24px。 所以此时它的 padding 和 margin 是 24px。 那么高度呢？请计算一下！ jsliang 的文档库由 梁峻荣 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议 进行许可。基于 https://github.com/LiangJunrong/document-library 上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。","categories":[{"name":"CSS样式","slug":"CSS样式","permalink":"http://markc1991.github.io/categories/CSS%E6%A0%B7%E5%BC%8F/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://markc1991.github.io/tags/CSS/"}]},{"title":"CSS基础","slug":"移动端","date":"2016-08-16T02:12:08.000Z","updated":"2021-07-15T12:07:18.973Z","comments":true,"path":"2016/08/16/移动端/","link":"","permalink":"http://markc1991.github.io/2016/08/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF/","excerpt":"一 目录不折腾的前端，和咸鱼有什么区别","text":"一 目录不折腾的前端，和咸鱼有什么区别 目录 一 目录 二 前言 三 移动端使用的单位 四 移动端布局总结 五 1px 实现 六 300ms 点击延迟 &emsp;6.1 jsliang 阐述 &emsp;6.2 浏览器开发商解决方案 &emsp;6.3 JavaScript 解决方案 七 参考文献 二 前言 返回目录 关于移动端的一些问题。 三 移动端使用的单位 返回目录 em：定义字体大小时以父级的字体大小为基准；定义长度单位时以当前字体大小为基准。 rem：以根元素的字体大小为基准。 %：以父级的宽度为基准。 vw/vh：基于视口的宽度和高度。 四 移动端布局总结 返回目录 使用 rem 单位。可以拷贝淘宝那份代码直接使用，简单来说就是定义 1rem = 16px，然后配合 meta 使用。 通过 position: relative/absolute 布局（现在更推荐使用 Flex 布局） 以上为个人经验，更多的没接触过，欢迎补充。 五 1px 实现 返回目录 产生的原因： 根本原因是 750px 的设计稿上是 UI 设计师期待的 1px 物理像素，它对应实际 375px 稿子上的 0.5px 设备独立像素。 而 0.5px 设备独立像素对于 IOS-8 支持，对于安卓不支持。 所以安卓会将 0.5px 的设备独立像素渲染成 1px 的设备独立像素，也就是说，安卓在 375px 稿子上的设备独立像素为 1px 时，占 2px 物理像素，更粗。 所以我们拿到设计稿，要按照像素比 dpr 换算，每次量的单位 = 单位 / dpr，比如 dpr 为 2 的时候，1px 转换为 CSS 以后就是 0.5px。（我们看的页面效果是按以物理像素来说，这才是问题的关键） 方法一：利用 ::after + transform 123456div::after &#123; display: block; content: &#x27;&#x27;; border: 1px solid #ccc; transform: scaleY(0.5);&#125; 方法二：利用 box-shadow 123div: &#123; box-shadow: 0 0.5px 0 0 #fff;&#125; 六 300ms 点击延迟 返回目录 历史原因： 首款 iPhone 发布的时候，因为手机不知道用户点击一次屏幕，是点击按钮链接，还是要进行双击缩放。 所以 IOS Safari 就等待 300ms 来判断用户需要哪个操作（单击还是双击），然后产品一把抄，其他手机也逐渐变成这样了。 6.1 jsliang 阐述 返回目录 300ms 是由于首款苹果做了个双击放大的效果，为了能看到用户到底是希望单击还是双击，所以有个 300ms 的等待，让手机知道用户想做啥。 一开始还没啥，现在网速越来越快、手机性能越来越好，这个弊端就暴露了。 网上有很多解决方案，说的较多的是浏览器厂商提供 viewport 的设置，还有 pollfill。 但是比较有效的是 FastClick，它利用的原理是在 touchend 中绑定自定义 click 事件，触发该事件后直接阻止 300ms 后的 click 事件。 实现自定义事件有 3 种方法： new Event new CustomEvent document.createEvent(&#39;CustomEvent&#39;) 然后通过给按钮绑定 addEventListener(eventName, callback) 来实现。 6.2 浏览器开发商解决方案 返回目录 方法一：禁止缩放 1&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no, initial-scale=1, maxinmum-scale=1&quot;&gt; 缺陷：并不能很好解决问题，用户想看图片这些没法双击放大看了。 方法二：更改默认的视口宽度 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt; 总结 对于方案一和方案二，Chrome 是率先支持的，Firefox 紧随其后，然而 Safari 令人头疼的是，它除了双击缩放还有双击滚动操作，如果采用这种两种方案，那势必连双击滚动也要一起禁用； 6.3 JavaScript 解决方案 返回目录 方法一：指针事件的 polyfill 除了IE，其他大部分浏览器都还不支持指针事件。有一些JS库，可以让我们提前使用指针事件。比如： 谷歌的Polymer 微软的HandJS @Rich-Harris 的 Points 方法二：FastClick FastClick 是 FT Labs 专门为解决移动端浏览器 300 毫秒点击延迟问题所开发的一个轻量级的库。 实现原理是检测到 touchend 事件的时候，通过 DOM 自定义事件模拟一个 click 事件，并把浏览器 300ms 之后的 click 阻止掉。 七 参考文献 返回目录 Mars - mobile needs a hero【阅读建议：无】 腾讯移动Web前端知识库【阅读建议：无】 关于移动端适配，你必须要知道的【阅读建议：30min】 如何解决移动端Click事件300ms延迟的问题？【阅读建议：20min】 设计方案–移动端延迟300ms的原因以及解决方案【阅读建议：20min】 细说移动端 经典的REM布局 与 新秀VW布局【阅读建议：30min】 移动端1px解决方案【阅读建议：30min】 Retina屏的移动设备如何实现真正1px的线？【阅读建议：20min】 rem布局解析【阅读建议：5min】 jsliang 的文档库由 梁峻荣 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议 进行许可。基于 https://github.com/LiangJunrong/document-library 上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。","categories":[{"name":"CSS样式","slug":"CSS样式","permalink":"http://markc1991.github.io/categories/CSS%E6%A0%B7%E5%BC%8F/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://markc1991.github.io/tags/CSS/"}]},{"title":"CSS基础","slug":"基础","date":"2016-08-16T02:12:08.000Z","updated":"2021-07-15T12:06:53.076Z","comments":true,"path":"2016/08/16/基础/","link":"","permalink":"http://markc1991.github.io/2016/08/16/%E5%9F%BA%E7%A1%80/","excerpt":"一 目录不折腾的前端，和咸鱼有什么区别","text":"一 目录不折腾的前端，和咸鱼有什么区别 目录 一 目录 二 前言 三 DIV + CSS 布局的优缺点 四 如何解决 a 标点击后 hover 事件失效的问题？ 五 响应式 六 脱离文档流 七 块级格式化上下文（BFC） 八 盒子模型 九 link 和 @import 区别 十 渐进增减和优雅降级 十一 CSS 实现垂直居中 十二 CSS 单位 十三 CSS 设置隐藏元素 十四 CSS 选择器 十五 层叠上下文 十六 dispaly 和 position &emsp;16.1 display &emsp;16.2 position 十七 CSS3 &emsp;17.1 新特性 &emsp;17.2 Flexbox 弹性盒布局模型 十八 CSS 优化 &emsp;18.1 CSS 匹配规则 &emsp;18.2 CSS 的 style 标签位置 十九 题目 &emsp;19.1 BFC &emsp;19.2 CSS 盒模型 二 前言 返回目录 CSS 基础有很多内容，需要细细理解，毕竟有时候用得不多，除非你是做移动端或者交互比较多的项目。 三 DIV + CSS 布局的优缺点 返回目录 优点： 代码精简，且结构与样式分离，易于维护 代码量减少了，减少了大量的带宽，页面加载的也更快，提升了用户的体验 对 SEO 搜索引擎更加友好，且 H5 又新增了许多语义化标签更是如此 允许更多炫酷的页面效果，丰富了页面 符合 W3C 标准，保证网站不会因为网络应用的升级而被淘汰 缺点： 不同浏览器对 Web 标准默认值不同，所以更容易出现对浏览器的兼容性问题。 四 如何解决 a 标点击后 hover 事件失效的问题？ 返回目录 改变 a 标签 CSS 属性的排列顺序： LoVe HAte 原则 1link -&gt; visited -&gt; hover -&gt; active a:link：简写 a，未访问的样式 a:visited：已经访问的样式 a:hover：鼠标移上去时的样式 a:active：鼠标按下的样式 在 CSS 中，如果对于相同元素针对不同条件的定义，适宜将最一般的条件放在最上面，依次向下，保证最下面的是最特殊的条件（可以理解为样式覆盖）。 这样，浏览器显示元素的时候，才会从特殊到一半、逐级向上验证条件。 五 响应式 返回目录 响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的版本。 基本原理是通过媒体查询（@media）检测不同的设备屏幕尺寸做处理。 好处：对某些数据的修改就能自动更新视图，让开发者不需要操作 DOM，有更多的时间去思考完成业务逻辑。 六 脱离文档流 返回目录 文档流：将窗体自上而下分成一行一行，并在每行中按从左至右一次排放元素，成为文档流，也就普通流。 脱离文档流：脱离文档流的元素，将不再在文档流占据空间，而是漂浮在文档流上方。 float: left/right：使用之后会脱离，但是其他盒子会环绕该元素的周围。 position: absolute/fixed：absolute 为绝对定位，脱离文档流之后还是会相对于该元素的父类（做了 relative/absolute 定位的父类）进行偏移。而 fixed 就是完全脱离文档流，相对于 HTML （整个浏览器窗口）的形式展示。 七 块级格式化上下文（BFC） 返回目录 BFC 布局规则 是指页面上一个隔离的独立容器，容器内部的子元素不会影响到外面的元素，反之外面的元素也不会影响容器里面的元素。 特性： 在 BFC 中，盒子从顶端开始垂直地一个接一个地排列 盒子垂直方向的距离由 margin 决定，属于同一个 BFC 的两个相邻盒子的 margin 会发生重叠 外边距问题 12&lt;div style=&quot;width:100px; height:100px; margin-bottom:100px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;width:100px; height:100px; margin-top:200px;&quot;&gt;&lt;/div&gt; 这段代码产生的页面中，它们的边距是 200px，需要通过 BFC 解决边距问题。 主要用途： 清除元素内部浮动。overflow: hidden 解决外边距合并问题。创建 2 个不同 BFC，就不会发生 margin 重叠 产生 BFC 的条件： 根元素 html float: left/right position: absolute/fixed display: inline-block/flex/grid overflow: hidden 八 盒子模型 返回目录 box-sizing: content-box。标准盒子，总宽度等于：width + padding + border + margin。 box-sizing: border-box。IE 盒子，总宽度等于：width + margin。IE 盒子的 width 包含了 width、padding 和 border 属性。 详细看：jsliang - 盒子模型 九 link 和 @import 区别 返回目录 CSS 引入方式有： 内联：style 属性（style=&quot;color: red&quot;） 内嵌：style 标签（&lt;style&gt;&lt;/style&gt;） 外链：link 标签（&lt;link href=&quot;index.css&quot;&gt; 导入：@import（@import url(&#39;index.css&#39;) 或者 @import &#39;index.css&#39;） link 和 @import 区别： link 是 XHTML 标签，除了加载 CSS 外，还可以定义 RSS 等其他事务；@import 属于 CSS 范畴，只能加载 CSS。 link 引用 CSS 时，在页面载入时同时加载；@import 需要页面网页完全载入以后加载。 link 是 XHTML 标签，无兼容问题；@import 是在 CSS2.1 提出的，低版本的浏览器不支持。 link 支持使用 Javascript 控制 DOM 去改变样式；而 @import 不支持。 十 渐进增减和优雅降级 返回目录 关键的区别是他们所侧重的内容，以及这种不同造成的工作流程的差异。 优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。 渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。 区别： 优雅降级是从复杂的现状开始，并试图减少用户体验的供给 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带 十一 CSS 实现垂直居中 返回目录 方法一：Flex 布局（子元素是块级元素） 1234567891011.box &#123; display: flex; width: 100px; height: 100px; background-color: pink;&#125;.box-center&#123; margin: auto; background-color: greenyellow;&#125; 方法二：Flex 布局 123456789101112.box &#123; display: flex; width: 100px; height: 100px; background-color: pink; justify-content: center; align-items: center;&#125;.box-center&#123; background-color: greenyellow;&#125; 方法三：绝对定位实现（定位元素定宽定高） 123456789101112131415161718.box &#123; position: relative; height: 100px; width: 100px; background-color: pink;&#125;.box-center&#123; position: absolute; left: 0; right: 0; bottom: 0; top: 0; margin: auto; width: 50px; height: 50px; background-color: greenyellow;&#125; 方法四：使用 transform 父盒子设置：display: relative div 设置： 123456div &#123; transform: translate(-50%, -50%); position: absolute; top: 50%; left: 50%;&#125; 十二 CSS 单位 返回目录 px px 是像素（pixel）的缩写，相对长度单位，是网页设计常用的基本基本单位，它是相对于显示器屏幕分辨率而言的。 em em 是相对长度单位，相对于对象内文本的字体尺寸（参考物是父元素的 font-size。 如果当前父元素的字体元素未设置，则相对于浏览器的默认字体尺寸设置。 rem rem 是相对于 HTML 根元素的字体大小（font-size）来计算的长度单位。 如果你没有设置 HTML 字体大小，那么以浏览器默认为主，一般为 16px。 vw/vh vw 和 vh 是相对于 viewport - 相对视口的宽度或者高度而定的。 一般来说：1vw = npx / 100，即浏览器宽度为 200px 的时候，1vw = 200px / 100，即 1vw = 2px。 十三 CSS 设置隐藏元素 返回目录 display: none：彻底消失，会导致浏览器回流和重绘，不能再触发点击事件。 visibility: hidden：元素隐藏，空间仍保留，会导致重绘，但是不能再触发点击事件。 opacity: 0：设置为透明，相当于它还在那里，但是你看不到，可以触发点击事件。 十四 CSS 选择器 返回目录 CSS 选择器及样式优先级： 在属性后面使用 !important 会覆盖页面任意位置定义的元素样式 作为 style 属性写在元素内的样式（行内样式） id 选择器 类选择器 | 伪类选择器 | 属性选择器（后面样式覆盖前面样式） 标签选择器 通配符选择器 浏览器自定义样式 十五 层叠上下文 返回目录 层叠上下文（stacking context），是 HTML 中一个三维的概念。在 CSS2.1 规范中，每个盒模型的位置是三维的，分别是平面画布上的 X 轴，Y 轴以及表示层叠的 Z 轴。 一般情况下，元素在页面上沿 X 轴 Y 轴平铺，我们察觉不到它们在 Z 轴上的层叠关系。 而一旦元素发生堆叠，这时就能发现某个元素可能覆盖了另一个元素或者被另一个元素覆盖。 触发条件： 根层叠上下文（HTML） position CSS3 属性 flex transform opacity filter will-change -webkit-overflow-scrolling 层叠等级：层叠上下文在 Z 轴上的排序 在同一层叠上下文中，层叠等级才有意义 z-index 的优先级最高 十六 dispaly 和 position 返回目录 16.1 display 返回目录 123div &#123; display: none;&#125; inline：（默认）内联 none：隐藏 block：块显示 table：表格显示 inline-block：内联块 16.2 position 返回目录 123div &#123; position: absolute;&#125; static：默认位置。不需要特别声明，不常用。 relative：相对定位。相对于元素默认的位置进行定位，设置 top/left/right/bottom 后的元素仍占据空间。 absolute：绝对定位。如果父元素设置了 position: absolute/relative，那么这个设置成立。它会根据上一个设置了 absolute/relative 的元素进行偏移。 fixed：固定定位。相对于整个浏览器窗口进行定位，无论页面怎么滚动。 sticky：黏性定位。屏幕范围内该元素位置不受影响，超出范围后，会变成 fixed，根据设置的 left/top 等属性成固定的效果。 十七 CSS3 返回目录 17.1 新特性 返回目录 RGBA 和透明度 background-image、background-origin(content-box/padding-box/border-box)、background-size、background-repeat word-wrap：对长的不可分割单词换行，例如 word-wrap：break-word 文字阴影：text-shadow: 5px 5px 5px #FF0000;，对应水平阴影，垂直阴影，模糊距离，阴影颜色 font-face 属性：定义自己的字体 圆角（边框半径）：border-radius 属性用于创建圆角 边框图片：border-image: url(border.png) 30 30 round 盒阴影：box-shadow: 10px 10px 5px #888888 媒体查询：定义两套 CSS，当浏览器的尺寸变化时会采用不同的属性 17.2 Flexbox 弹性盒布局模型 返回目录 该布局模型的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。 在传统的布局方式中，block 布局是把块在垂直方向从上到下依次排列的；而 inline 布局则是在水平方向来排列。 弹性盒布局并没有这样内在的方向限制，可以由开发人员自由操作。 试用场景：弹性布局适合于移动前端开发，在 Android 和 IOS 上也完美支持。 十八 CSS 优化 返回目录 避免过度约束 避免后代选择符 避免链式选择符 使用紧凑的语法 避免不必要的命名空间 避免不必要的重复 最好使用表示语义的名字。一个好的类名应该是描述他是什么而不是像什么 避免 !important，可以选择其他选择器 尽可能的精简规则，你可以合并不同类里的重复规则 18.1 CSS 匹配规则 返回目录 CSS 选择器的解析是从右向左解析的。 若从左向右的匹配，发现不符合规则，需要进行回溯，会损失很多性能。 若从右向左匹配，先找到所有的最右节点，对于每一个节点，向上寻找其父节点直到找到根元素或满足条件的匹配规则，则结束这个分支的遍历。 两种匹配规则的性能差别很大，是因为从右向左的匹配在第一步就筛选掉了大量的不符合条件的最右节点（叶子节点），而从左向右的匹配规则的性能都浪费在了失败的查找上面。 18.2 CSS 的 style 标签位置 返回目录 页面加载自上而下，当然是先加载样式。 写在 body 标签后由于浏览器以逐行方式对 HTML 文档进行解析，当解析到写在尾部的样式表（外联或写在 style 标签）会导致浏览器停止之前的渲染，等待加载且解析样式表完成之后重新渲染，在 Windows 的 IE 下可能会出现 FOUC 现象（即样式失效导致的页面闪烁问题）。 十九 题目 返回目录 19.1 BFC 返回目录 如果父元素都为浮动，不能解决父类高度塌陷问题的是： A：给父元素添加 clear: both B：给父元素添加 overflow: hidden C：在浮动元素下方添加空 div，并添加样式 clear: both D：设置父元素 :after &#123; content: &quot;&quot;, clear: both; display: block; overflow: hidden &#125; 答案：B 19.2 CSS 盒模型 返回目录 根据以下代码，两个 div 元素垂直间距为() 12&lt;div style=&quot;width:100px; height:100px; margin-bottom:100px;&quot;&gt;&lt;/div&gt;&lt;div style=&quot;width:100px; height:100px; margin-top:200px;&quot;&gt;&lt;/div&gt; A：100px B：200px C：300px D：400px 答案：B 原因：CSS 盒模型，块之间共享垂直外边距 margin，margin 取其最大值。（margin 塌陷问题） jsliang 的文档库由 梁峻荣 采用 知识共享 署名-非商业性使用-相同方式共享 4.0 国际 许可协议 进行许可。基于 https://github.com/LiangJunrong/document-library 上的作品创作。本许可协议授权之外的使用权限可以从 https://creativecommons.org/licenses/by-nc-sa/2.5/cn/ 处获得。","categories":[{"name":"CSS样式","slug":"CSS样式","permalink":"http://markc1991.github.io/categories/CSS%E6%A0%B7%E5%BC%8F/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://markc1991.github.io/tags/CSS/"}]}],"categories":[{"name":"HTML","slug":"HTML","permalink":"http://markc1991.github.io/categories/HTML/"},{"name":"CSS样式","slug":"CSS样式","permalink":"http://markc1991.github.io/categories/CSS%E6%A0%B7%E5%BC%8F/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://markc1991.github.io/tags/HTML/"},{"name":"CSS","slug":"CSS","permalink":"http://markc1991.github.io/tags/CSS/"}]}